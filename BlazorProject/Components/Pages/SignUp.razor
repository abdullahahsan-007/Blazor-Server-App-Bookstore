@page "/signup"
@using Microsoft.Data.SqlClient
@inject NavigationManager Nav
@rendermode InteractiveServer
@layout Components.Layout.EmptyLayout

<style>
    .signup-container {
        max-width: 400px;
        margin: 60px auto;
        padding: 2rem;
        background-color: #fdf7ff;
        border-radius: 16px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.05);
    }

    .signup-container h3 {
        color: #6a1b9a;
        text-align: center;
        margin-bottom: 1.5rem;
    }

    .form-control {
        border-radius: 10px;
        margin-bottom: 1rem;
    }

    .btn-purple {
        background-color: #8000ff;
        color: white;
        border: none;
        width: 100%;
        border-radius: 10px;
        padding: 0.6rem;
        font-weight: bold;
    }

    .btn-purple:hover {
        background-color: #5e00c9;
    }

    .signin-link {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 0.4rem;
        margin-top: 1.2rem;
        font-size: 0.95rem;
    }

    .success-message {
        color: green;
        text-align: center;
        margin-top: 1rem;
        font-weight: bold;
    }

    .error-message {
        color: red;
        text-align: center;
        margin-top: 1rem;
        font-weight: bold;
    }
</style>

<div class="signup-container">
    <h3>Sign Up</h3>

    <div>
        <label>Username:</label>
        <input @bind="Username" class="form-control" placeholder="Choose a username" />
    </div>

    <div>
        <label>Password:</label>
        <input type="password" @bind="Password" class="form-control" placeholder="Choose a password" />
    </div>

    <button class="btn btn-purple" @onclick="Register">Sign Up</button>

    <div class="signin-link">
        <span>Already have an account?</span>
        <a href="/login" class="text-primary fw-semibold text-decoration-none">Login</a>
    </div>

    @if (!string.IsNullOrEmpty(Message))
    {
            <div class="@GetMessageClass()">@Message</div>
    }
</div>

@code {
    string Username = "";
    string Password = "";
    string Role = "";
    string Message = "";

    string connectionString = @"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=project;Integrated Security=True";

    async Task Register()
    {
        try
        {
            using var connection = new SqlConnection(connectionString);
            await connection.OpenAsync();

            // Create table if not exists
            var createTableCmd = new SqlCommand(@"
                IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Users' AND xtype='U')
                CREATE TABLE Users (
                    Id INT PRIMARY KEY IDENTITY(1,1),
                    Username NVARCHAR(100) UNIQUE,
                    Password NVARCHAR(100),
                    Role NVARCHAR(50) NOT NULL DEFAULT 'User'
                );", connection);
            await createTableCmd.ExecuteNonQueryAsync();

            // Check if user exists
            var checkCmd = new SqlCommand("SELECT COUNT(*) FROM Users WHERE Username = @u", connection);
            checkCmd.Parameters.AddWithValue("@u", Username);
            int count = (int)await checkCmd.ExecuteScalarAsync();

            if (count > 0)
            {
                Message = "User already exists.";
                return;
            }

            // Insert user
            var insertCmd = new SqlCommand("INSERT INTO Users (Username, Password, Role) VALUES (@u, @p, @r)", connection);
            insertCmd.Parameters.AddWithValue("@u", Username);
            insertCmd.Parameters.AddWithValue("@p", Password);
            insertCmd.Parameters.AddWithValue("@r", "User");
            await insertCmd.ExecuteNonQueryAsync();

            Message = "Registration successful!";
            await Task.Delay(1000);
            Nav.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Message = "Error: " + ex.Message;
        }
    }

    string GetMessageClass() =>
        Message.StartsWith("Registration successful") ? "success-message" :
        Message.StartsWith("Error") || Message.Contains("exists") ? "error-message" :
        "";
}

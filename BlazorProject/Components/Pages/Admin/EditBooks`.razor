@page "/admin/editbooks"
@rendermode InteractiveServer
@layout Components.Layout.AdminLayout

<h3 class="text-center mb-4">Manage Books</h3>

@if (books == null)
{
        <div class="text-center text-muted">Loading books...</div>
}
else if (!books.Any())
{
        <div class="text-center text-muted">No books found.</div>
}
else
{
        <div class="table-responsive">
            <table class="table table-hover table-bordered shadow-sm">
                <thead class="table-light">
                    <tr>
                        <th>Title</th>
                        <th>Author</th>
                        <th>Genre</th>
                        <th>Price</th>
                        <th>Stock</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var book in books)
                {
                            <tr>
                                <td>@book.Title</td>
                                <td>@book.Author</td>
                                <td>@book.Genre</td>
                                <td>@book.Price.ToString("C")</td>
                                <td>@book.Stock</td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-warning me-2" @onclick="() => EditBook(book)">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteBook(book.Id)">Delete</button>
                                </td>
                            </tr>
                }
                </tbody>
            </table>
        </div>
}

@if (editingBook != null)
{
        <div class="card shadow p-4 mt-5 rounded-4" style="max-width: 600px; margin: auto;">
            <h4 class="mb-4 text-center">Edit Book</h4>

            <div class="mb-3">
                <label class="form-label">Title:</label>
                <input class="form-control rounded-3" @bind="editingBook.Title" />
            </div>

            <div class="mb-3">
                <label class="form-label">Author:</label>
                <input class="form-control rounded-3" @bind="editingBook.Author" />
            </div>

            <div class="mb-3">
                <label class="form-label">Genre:</label>
                <input class="form-control rounded-3" @bind="editingBook.Genre" />
            </div>

            <div class="mb-3">
                <label class="form-label">Price:</label>
                <input type="number" step="0.01" class="form-control rounded-3" @bind="editingBook.Price" />
            </div>

            <div class="mb-3">
                <label class="form-label">Stock:</label>
                <input type="number" class="form-control rounded-3" @bind="editingBook.Stock" />
            </div>

            <div class="mb-3">
                <label class="form-label">Cover Image URL:</label>
                <input class="form-control rounded-3" @bind="editingBook.CoverImageUrl" />
            </div>

            <div class="mb-3">
                <label class="form-label">Description:</label>
                <textarea class="form-control rounded-3" rows="4" @bind="editingBook.Description"></textarea>
            </div>

            <div class="d-flex justify-content-end">
                <button class="btn btn-primary me-2" @onclick="UpdateBook">Save Changes</button>
                <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </div>
        </div>
}


@if (!string.IsNullOrEmpty(message))
{
        <p class="text-success mt-2">@message</p>
}

@code {
    private List<Book> books;
    private Book editingBook;
    private string message = "";

    string connectionString = @"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=project;Integrated Security=True";

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        books = new List<Book>();
        using var connection = new Microsoft.Data.SqlClient.SqlConnection(connectionString);
        await connection.OpenAsync();

        var cmd = connection.CreateCommand();
        cmd.CommandText = "SELECT * FROM Books";

        using var reader = await cmd.ExecuteReaderAsync();
        while (await reader.ReadAsync())
        {
            books.Add(new Book
                {
                    Id = reader.GetInt32(0),
                    Title = reader.GetString(1),
                    Author = reader.GetString(2),
                    Genre = reader.GetString(3),
                    Price = reader.GetDecimal(4),
                    Stock = reader.GetInt32(5),
                    CoverImageUrl = reader.GetString(6),
                    Description = reader.GetString(7)
                });
        }
    }

    private void EditBook(Book book)
    {
        editingBook = new Book
            {
                Id = book.Id,
                Title = book.Title,
                Author = book.Author,
                Genre = book.Genre,
                Price = book.Price,
                Stock = book.Stock,
                CoverImageUrl = book.CoverImageUrl,
                Description = book.Description
            };
    }

    private void CancelEdit()
    {
        editingBook = null;
        message = "";
    }

    private async Task UpdateBook()
    {
        using var connection = new Microsoft.Data.SqlClient.SqlConnection(connectionString);
        await connection.OpenAsync();

        var cmd = connection.CreateCommand();
        cmd.CommandText = @"
            UPDATE Books 
            SET Title = @Title, Author = @Author, Genre = @Genre, 
                Price = @Price, Stock = @Stock, 
                CoverImageUrl = @CoverImageUrl, Description = @Description 
            WHERE Id = @Id";

        cmd.Parameters.AddWithValue("@Title", editingBook.Title);
        cmd.Parameters.AddWithValue("@Author", editingBook.Author);
        cmd.Parameters.AddWithValue("@Genre", editingBook.Genre);
        cmd.Parameters.AddWithValue("@Price", editingBook.Price);
        cmd.Parameters.AddWithValue("@Stock", editingBook.Stock);
        cmd.Parameters.AddWithValue("@CoverImageUrl", editingBook.CoverImageUrl);
        cmd.Parameters.AddWithValue("@Description", editingBook.Description);
        cmd.Parameters.AddWithValue("@Id", editingBook.Id);

        await cmd.ExecuteNonQueryAsync();
        message = "Book updated successfully.";

        editingBook = null;
        await LoadBooks();
    }

    private async Task DeleteBook(int id)
    {
        using var connection = new Microsoft.Data.SqlClient.SqlConnection(connectionString);
        await connection.OpenAsync();

        var cmd = connection.CreateCommand();
        cmd.CommandText = "DELETE FROM Books WHERE Id = @Id";
        cmd.Parameters.AddWithValue("@Id", id);

        await cmd.ExecuteNonQueryAsync();
        message = "Book deleted successfully.";

        await LoadBooks();
    }

    public class Book
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Author { get; set; } = "";
        public string Genre { get; set; } = "";
        public decimal Price { get; set; }
        public int Stock { get; set; }
        public string CoverImageUrl { get; set; } = "";
        public string Description { get; set; } = "";
    }
}
